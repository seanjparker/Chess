package chess.core.online;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JOptionPane;

import org.mindrot.jbcrypt.BCrypt;

import chess.core.utils.Utils;

public class Database {
	private static final String REGEX = "[a-zA-z0-9]{4,12}"; //Ensures on lower-case -- upper-case and numbers w/ length of 4-12 charcaters for username
	public static Connection initSQLConnection() {
		Connection c = null;
		try {
			String url = "jdbc:mysql://localhost:3306/chess" + "?verifyServerCertificate=false" + "&useSSL=false" + "&requireSSL=false";
			String user = "root"; //Username for home login
			String pass = "zkxaYod9gm"; //Password for home login
			//String user = "root"; //Username for school login
			//String pass = "Password12"; //Password for school login
				
			c = DriverManager.getConnection(url, user, pass);
		} catch (SQLException e) { //Catches any sql exception
			Utils.simpleDialog("Error", "Secure connection to SQL Server couldn't be established.", JOptionPane.ERROR_MESSAGE);
			e.printStackTrace();
        }
		return c; //Returns a connection, may be null if connection failed
	}
	
	public static boolean executeInsertUser(Connection c, String username, String password) {
		//Check the username is valid
		if (validUsername(username) && !password.isEmpty()) {
			//Salt generated by BCrypt.genSalt(), then hash and salt - insert to database
			String salt = BCrypt.gensalt();
			String hash = BCrypt.hashpw(password, salt);
			String query = "INSERT INTO `chess`.`users` (`username`, `hash`, `salt`) VALUES (?, ?, ?)";
		
			try {
				PreparedStatement pre = c.prepareStatement(query); //Prevents a first order SQL injection
				pre.setString(1, username);
				pre.setString(2, hash);
				pre.setString(3, salt);
		
				//Add a new user to the table
				pre.executeUpdate();
			
				return true;
			} catch (SQLException e) { //Catches any SQL exceptions
				e.printStackTrace();
			}
		}
		return false;
	}

	public static boolean authLogin(Connection c, String username, String password) {
		String hash = null, salt = null, id = null;
		String query;

		try {
			//Get the user id from the username
			id = getUserID(c, username);
			
			if (id != null) {
				query = "SELECT hash, salt FROM users WHERE user_id = ?"; //Gets the salt and hash for the user from the table
				PreparedStatement pre1 = c.prepareStatement(query);
				pre1.setString(1, id);
				ResultSet res1 = pre1.executeQuery();
				
				while (res1.next()) {
					hash = res1.getString("hash"); //Retrieves the hash
					salt = res1.getString("salt"); //Retrieves the salt
				}
				res1.close(); //Closes the results table
				pre1.close();				
			}
		} catch (SQLException e) { //Catches any sql exception that may occur
			e.printStackTrace();
		}
		
		if ((id != null) && (hash != null) && (salt != null)) {
			return BCrypt.checkpw(password, hash); //Uses jBCrypt to determine if the password is valid
		}
		return false;
	}
	
	public static String getUserID(Connection c, String username) {
		String q = "SELECT user_id FROM users WHERE username = ?";
		String id = null;
		try {
			//Get the user id from the username
			PreparedStatement pre = c.prepareStatement(q);
			pre.setString(1, username);
			ResultSet res = pre.executeQuery();
			
			if (res.next()) { id = res.getString("user_id"); } //Gets the user id according to the provided username
			res.close();
			pre.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return id;		
	}
	
	private static boolean validUsername(String username) {
		Pattern p = Pattern.compile(REGEX); //By limiting the length of the username, this prevents some second order sql injections
		Matcher m = p.matcher(username); //Initalizes the regular expression for pattern matching
		if (m.matches()) { return true; }
		return false;
	}
}
